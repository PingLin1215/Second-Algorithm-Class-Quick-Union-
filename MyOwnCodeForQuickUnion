public class QuickUnion{
    private int[] id;
    
    public QuickUnion(int N){
	
	id = new int[N];
	for(int i = 0; i < N; i++){
	    
	    id[i] = i;
	}
    }
    
    public boolean connected(int p, int q){
	int pParent = id[p];
	int qParent = id[q];
	int pRoot = pParent;
	int qRoot= qParent; 
	
	while(pParent != id[pParent]){
	    pParent = id[pParent];
	}
	pRoot = pParent;
	
	while(qParent != id[qParent]){
	    qParent = id[qParent];
	}	    	    
	qRoot = qParent;
        
        return id[pRoot] == id[qRoot];	
    }
    
    public void union(int p, int q){
	int pParent = id[p];
	int qParent = id[q];
	int pRoot = pParent;
        int qRoot= qParent;
	
	while(pParent != id[pParent]){
	    pParent = id[pParent];
	}
	
	pRoot = pParent;
	
	while(qParent != id[qParent]){
	    qParent = id[qParent];
	}   
	qRoot = qParent;
	
	id[pRoot] = qRoot;
    }

    public void printOut(){

	for(int i = 0; i < id.length; i++){

	    System.out.println("id:"+ i + "parent:" + id[i]);
        }
    }
    
}         
	    
